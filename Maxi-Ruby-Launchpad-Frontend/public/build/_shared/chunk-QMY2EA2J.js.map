{
  "version": 3,
  "sources": ["../../../node_modules/preact/src/util.js", "../../../node_modules/preact/src/options.js", "../../../node_modules/preact/src/create-element.js", "../../../node_modules/preact/src/component.js", "../../../node_modules/preact/src/create-context.js", "../../../node_modules/preact/src/constants.js", "../../../node_modules/preact/src/diff/children.js", "../../../node_modules/preact/src/diff/props.js", "../../../node_modules/preact/src/diff/index.js", "../../../node_modules/preact/src/render.js", "../../../node_modules/preact/src/clone-element.js", "../../../node_modules/preact/src/diff/catch-error.js", "../../../node_modules/preact/hooks/src/index.js"],
  "sourcesContent": ["import { EMPTY_ARR } from './constants';\n\nexport const isArray = Array.isArray;\n\n/**\n * Assign properties from `props` to `obj`\n * @template O, P The obj and props types\n * @param {O} obj The object to copy properties to\n * @param {P} props The object to copy properties from\n * @returns {O & P}\n */\nexport function assign(obj, props) {\n\t// @ts-ignore We change the type of `obj` to be `O & P`\n\tfor (let i in props) obj[i] = props[i];\n\treturn /** @type {O & P} */ (obj);\n}\n\n/**\n * Remove a child node from its parent if attached. This is a workaround for\n * IE11 which doesn't support `Element.prototype.remove()`. Using this function\n * is smaller than including a dedicated polyfill.\n * @param {Node} node The node to remove\n */\nexport function removeNode(node) {\n\tlet parentNode = node.parentNode;\n\tif (parentNode) parentNode.removeChild(node);\n}\n\nexport const slice = EMPTY_ARR.slice;\n", "import { _catchError } from './diff/catch-error';\n\n/**\n * The `option` object can potentially contain callback functions\n * that are called during various stages of our renderer. This is the\n * foundation on which all our addons like `preact/debug`, `preact/compat`,\n * and `preact/hooks` are based on. See the `Options` type in `internal.d.ts`\n * for a full list of available option hooks (most editors/IDEs allow you to\n * ctrl+click or cmd+click on mac the type definition below).\n * @type {import('./internal').Options}\n */\nconst options = {\n\t_catchError\n};\n\nexport default options;\n", "import { slice } from './util';\nimport options from './options';\n\nlet vnodeId = 0;\n\n/**\n * Create an virtual node (used for JSX)\n * @param {import('./internal').VNode[\"type\"]} type The node name or Component\n * constructor for this virtual node\n * @param {object | null | undefined} [props] The properties of the virtual node\n * @param {Array<import('.').ComponentChildren>} [children] The children of the virtual node\n * @returns {import('./internal').VNode}\n */\nexport function createElement(type, props, children) {\n\tlet normalizedProps = {},\n\t\tkey,\n\t\tref,\n\t\ti;\n\tfor (i in props) {\n\t\tif (i == 'key') key = props[i];\n\t\telse if (i == 'ref') ref = props[i];\n\t\telse normalizedProps[i] = props[i];\n\t}\n\n\tif (arguments.length > 2) {\n\t\tnormalizedProps.children =\n\t\t\targuments.length > 3 ? slice.call(arguments, 2) : children;\n\t}\n\n\t// If a Component VNode, check for and apply defaultProps\n\t// Note: type may be undefined in development, must never error here.\n\tif (typeof type == 'function' && type.defaultProps != null) {\n\t\tfor (i in type.defaultProps) {\n\t\t\tif (normalizedProps[i] === undefined) {\n\t\t\t\tnormalizedProps[i] = type.defaultProps[i];\n\t\t\t}\n\t\t}\n\t}\n\n\treturn createVNode(type, normalizedProps, key, ref, null);\n}\n\n/**\n * Create a VNode (used internally by Preact)\n * @param {import('./internal').VNode[\"type\"]} type The node name or Component\n * Constructor for this virtual node\n * @param {object | string | number | null} props The properties of this virtual node.\n * If this virtual node represents a text node, this is the text of the node (string or number).\n * @param {string | number | null} key The key for this virtual node, used when\n * diffing it against its children\n * @param {import('./internal').VNode[\"ref\"]} ref The ref property that will\n * receive a reference to its created child\n * @returns {import('./internal').VNode}\n */\nexport function createVNode(type, props, key, ref, original) {\n\t// V8 seems to be better at detecting type shapes if the object is allocated from the same call site\n\t// Do not inline into createElement and coerceToVNode!\n\tconst vnode = {\n\t\ttype,\n\t\tprops,\n\t\tkey,\n\t\tref,\n\t\t_children: null,\n\t\t_parent: null,\n\t\t_depth: 0,\n\t\t_dom: null,\n\t\t// _nextDom must be initialized to undefined b/c it will eventually\n\t\t// be set to dom.nextSibling which can return `null` and it is important\n\t\t// to be able to distinguish between an uninitialized _nextDom and\n\t\t// a _nextDom that has been set to `null`\n\t\t_nextDom: undefined,\n\t\t_component: null,\n\t\t_hydrating: null,\n\t\tconstructor: undefined,\n\t\t_original: original == null ? ++vnodeId : original\n\t};\n\n\t// Only invoke the vnode hook if this was *not* a direct copy:\n\tif (original == null && options.vnode != null) options.vnode(vnode);\n\n\treturn vnode;\n}\n\nexport function createRef() {\n\treturn { current: null };\n}\n\nexport function Fragment(props) {\n\treturn props.children;\n}\n\n/**\n * Check if a the argument is a valid Preact VNode.\n * @param {*} vnode\n * @returns {vnode is import('./internal').VNode}\n */\nexport const isValidElement = vnode =>\n\tvnode != null && vnode.constructor === undefined;\n", "import { assign } from './util';\nimport { diff, commitRoot } from './diff/index';\nimport options from './options';\nimport { Fragment } from './create-element';\n\n/**\n * Base Component class. Provides `setState()` and `forceUpdate()`, which\n * trigger rendering\n * @param {object} props The initial component props\n * @param {object} context The initial context from parent components'\n * getChildContext\n */\nexport function Component(props, context) {\n\tthis.props = props;\n\tthis.context = context;\n}\n\n/**\n * Update component state and schedule a re-render.\n * @this {import('./internal').Component}\n * @param {object | ((s: object, p: object) => object)} update A hash of state\n * properties to update with new values or a function that given the current\n * state and props returns a new partial state\n * @param {() => void} [callback] A function to be called once component state is\n * updated\n */\nComponent.prototype.setState = function (update, callback) {\n\t// only clone state when copying to nextState the first time.\n\tlet s;\n\tif (this._nextState != null && this._nextState !== this.state) {\n\t\ts = this._nextState;\n\t} else {\n\t\ts = this._nextState = assign({}, this.state);\n\t}\n\n\tif (typeof update == 'function') {\n\t\t// Some libraries like `immer` mark the current state as readonly,\n\t\t// preventing us from mutating it, so we need to clone it. See #2716\n\t\tupdate = update(assign({}, s), this.props);\n\t}\n\n\tif (update) {\n\t\tassign(s, update);\n\t}\n\n\t// Skip update if updater function returned null\n\tif (update == null) return;\n\n\tif (this._vnode) {\n\t\tif (callback) {\n\t\t\tthis._stateCallbacks.push(callback);\n\t\t}\n\t\tenqueueRender(this);\n\t}\n};\n\n/**\n * Immediately perform a synchronous re-render of the component\n * @this {import('./internal').Component}\n * @param {() => void} [callback] A function to be called after component is\n * re-rendered\n */\nComponent.prototype.forceUpdate = function (callback) {\n\tif (this._vnode) {\n\t\t// Set render mode so that we can differentiate where the render request\n\t\t// is coming from. We need this because forceUpdate should never call\n\t\t// shouldComponentUpdate\n\t\tthis._force = true;\n\t\tif (callback) this._renderCallbacks.push(callback);\n\t\tenqueueRender(this);\n\t}\n};\n\n/**\n * Accepts `props` and `state`, and returns a new Virtual DOM tree to build.\n * Virtual DOM is generally constructed via [JSX](http://jasonformat.com/wtf-is-jsx).\n * @param {object} props Props (eg: JSX attributes) received from parent\n * element/component\n * @param {object} state The component's current state\n * @param {object} context Context object, as returned by the nearest\n * ancestor's `getChildContext()`\n * @returns {import('./index').ComponentChildren | void}\n */\nComponent.prototype.render = Fragment;\n\n/**\n * @param {import('./internal').VNode} vnode\n * @param {number | null} [childIndex]\n */\nexport function getDomSibling(vnode, childIndex) {\n\tif (childIndex == null) {\n\t\t// Use childIndex==null as a signal to resume the search from the vnode's sibling\n\t\treturn vnode._parent\n\t\t\t? getDomSibling(vnode._parent, vnode._parent._children.indexOf(vnode) + 1)\n\t\t\t: null;\n\t}\n\n\tlet sibling;\n\tfor (; childIndex < vnode._children.length; childIndex++) {\n\t\tsibling = vnode._children[childIndex];\n\n\t\tif (sibling != null && sibling._dom != null) {\n\t\t\t// Since updateParentDomPointers keeps _dom pointer correct,\n\t\t\t// we can rely on _dom to tell us if this subtree contains a\n\t\t\t// rendered DOM node, and what the first rendered DOM node is\n\t\t\treturn sibling._dom;\n\t\t}\n\t}\n\n\t// If we get here, we have not found a DOM node in this vnode's children.\n\t// We must resume from this vnode's sibling (in it's parent _children array)\n\t// Only climb up and search the parent if we aren't searching through a DOM\n\t// VNode (meaning we reached the DOM parent of the original vnode that began\n\t// the search)\n\treturn typeof vnode.type == 'function' ? getDomSibling(vnode) : null;\n}\n\n/**\n * Trigger in-place re-rendering of a component.\n * @param {import('./internal').Component} component The component to rerender\n */\nfunction renderComponent(component) {\n\tlet vnode = component._vnode,\n\t\toldDom = vnode._dom,\n\t\tparentDom = component._parentDom;\n\n\tif (parentDom) {\n\t\tlet commitQueue = [],\n\t\t\trefQueue = [];\n\t\tconst oldVNode = assign({}, vnode);\n\t\toldVNode._original = vnode._original + 1;\n\n\t\tdiff(\n\t\t\tparentDom,\n\t\t\tvnode,\n\t\t\toldVNode,\n\t\t\tcomponent._globalContext,\n\t\t\tparentDom.ownerSVGElement !== undefined,\n\t\t\tvnode._hydrating != null ? [oldDom] : null,\n\t\t\tcommitQueue,\n\t\t\toldDom == null ? getDomSibling(vnode) : oldDom,\n\t\t\tvnode._hydrating,\n\t\t\trefQueue\n\t\t);\n\n\t\tcommitRoot(commitQueue, vnode, refQueue);\n\n\t\tif (vnode._dom != oldDom) {\n\t\t\tupdateParentDomPointers(vnode);\n\t\t}\n\t}\n}\n\n/**\n * @param {import('./internal').VNode} vnode\n */\nfunction updateParentDomPointers(vnode) {\n\tif ((vnode = vnode._parent) != null && vnode._component != null) {\n\t\tvnode._dom = vnode._component.base = null;\n\t\tfor (let i = 0; i < vnode._children.length; i++) {\n\t\t\tlet child = vnode._children[i];\n\t\t\tif (child != null && child._dom != null) {\n\t\t\t\tvnode._dom = vnode._component.base = child._dom;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\treturn updateParentDomPointers(vnode);\n\t}\n}\n\n/**\n * The render queue\n * @type {Array<import('./internal').Component>}\n */\nlet rerenderQueue = [];\n\n/*\n * The value of `Component.debounce` must asynchronously invoke the passed in callback. It is\n * important that contributors to Preact can consistently reason about what calls to `setState`, etc.\n * do, and when their effects will be applied. See the links below for some further reading on designing\n * asynchronous APIs.\n * * [Designing APIs for Asynchrony](https://blog.izs.me/2013/08/designing-apis-for-asynchrony)\n * * [Callbacks synchronous and asynchronous](https://blog.ometer.com/2011/07/24/callbacks-synchronous-and-asynchronous/)\n */\n\nlet prevDebounce;\n\nconst defer =\n\ttypeof Promise == 'function'\n\t\t? Promise.prototype.then.bind(Promise.resolve())\n\t\t: setTimeout;\n\n/**\n * Enqueue a rerender of a component\n * @param {import('./internal').Component} c The component to rerender\n */\nexport function enqueueRender(c) {\n\tif (\n\t\t(!c._dirty &&\n\t\t\t(c._dirty = true) &&\n\t\t\trerenderQueue.push(c) &&\n\t\t\t!process._rerenderCount++) ||\n\t\tprevDebounce !== options.debounceRendering\n\t) {\n\t\tprevDebounce = options.debounceRendering;\n\t\t(prevDebounce || defer)(process);\n\t}\n}\n\n/**\n * @param {import('./internal').Component} a\n * @param {import('./internal').Component} b\n */\nconst depthSort = (a, b) => a._vnode._depth - b._vnode._depth;\n\n/** Flush the render queue by rerendering all queued components */\nfunction process() {\n\tlet c;\n\trerenderQueue.sort(depthSort);\n\t// Don't update `renderCount` yet. Keep its value non-zero to prevent unnecessary\n\t// process() calls from getting scheduled while `queue` is still being consumed.\n\twhile ((c = rerenderQueue.shift())) {\n\t\tif (c._dirty) {\n\t\t\tlet renderQueueLength = rerenderQueue.length;\n\t\t\trenderComponent(c);\n\t\t\tif (rerenderQueue.length > renderQueueLength) {\n\t\t\t\t// When i.e. rerendering a provider additional new items can be injected, we want to\n\t\t\t\t// keep the order from top to bottom with those new items so we can handle them in a\n\t\t\t\t// single pass\n\t\t\t\trerenderQueue.sort(depthSort);\n\t\t\t}\n\t\t}\n\t}\n\tprocess._rerenderCount = 0;\n}\n\nprocess._rerenderCount = 0;\n", "import { enqueueRender } from './component';\n\nexport let i = 0;\n\nexport function createContext(defaultValue, contextId) {\n\tcontextId = '__cC' + i++;\n\n\tconst context = {\n\t\t_id: contextId,\n\t\t_defaultValue: defaultValue,\n\t\t/** @type {import('./internal').FunctionComponent} */\n\t\tConsumer(props, contextValue) {\n\t\t\t// return props.children(\n\t\t\t// \tcontext[contextId] ? context[contextId].props.value : defaultValue\n\t\t\t// );\n\t\t\treturn props.children(contextValue);\n\t\t},\n\t\t/** @type {import('./internal').FunctionComponent} */\n\t\tProvider(props) {\n\t\t\tif (!this.getChildContext) {\n\t\t\t\t/** @type {import('./internal').Component[]} */\n\t\t\t\tlet subs = [];\n\t\t\t\tlet ctx = {};\n\t\t\t\tctx[contextId] = this;\n\n\t\t\t\tthis.getChildContext = () => ctx;\n\n\t\t\t\tthis.shouldComponentUpdate = function (_props) {\n\t\t\t\t\tif (this.props.value !== _props.value) {\n\t\t\t\t\t\t// I think the forced value propagation here was only needed when `options.debounceRendering` was being bypassed:\n\t\t\t\t\t\t// https://github.com/preactjs/preact/commit/4d339fb803bea09e9f198abf38ca1bf8ea4b7771#diff-54682ce380935a717e41b8bfc54737f6R358\n\t\t\t\t\t\t// In those cases though, even with the value corrected, we're double-rendering all nodes.\n\t\t\t\t\t\t// It might be better to just tell folks not to use force-sync mode.\n\t\t\t\t\t\t// Currently, using `useContext()` in a class component will overwrite its `this.context` value.\n\t\t\t\t\t\t// subs.some(c => {\n\t\t\t\t\t\t// \tc.context = _props.value;\n\t\t\t\t\t\t// \tenqueueRender(c);\n\t\t\t\t\t\t// });\n\n\t\t\t\t\t\t// subs.some(c => {\n\t\t\t\t\t\t// \tc.context[contextId] = _props.value;\n\t\t\t\t\t\t// \tenqueueRender(c);\n\t\t\t\t\t\t// });\n\t\t\t\t\t\tsubs.some(c => {\n\t\t\t\t\t\t\tc._force = true;\n\t\t\t\t\t\t\tenqueueRender(c);\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t};\n\n\t\t\t\tthis.sub = c => {\n\t\t\t\t\tsubs.push(c);\n\t\t\t\t\tlet old = c.componentWillUnmount;\n\t\t\t\t\tc.componentWillUnmount = () => {\n\t\t\t\t\t\tsubs.splice(subs.indexOf(c), 1);\n\t\t\t\t\t\tif (old) old.call(c);\n\t\t\t\t\t};\n\t\t\t\t};\n\t\t\t}\n\n\t\t\treturn props.children;\n\t\t}\n\t};\n\n\t// Devtools needs access to the context object when it\n\t// encounters a Provider. This is necessary to support\n\t// setting `displayName` on the context object instead\n\t// of on the component itself. See:\n\t// https://reactjs.org/docs/context.html#contextdisplayname\n\n\treturn (context.Provider._contextRef = context.Consumer.contextType =\n\t\tcontext);\n}\n", "export const EMPTY_OBJ = {};\nexport const EMPTY_ARR = [];\nexport const IS_NON_DIMENSIONAL =\n\t/acit|ex(?:s|g|n|p|$)|rph|grid|ows|mnc|ntw|ine[ch]|zoo|^ord|itera/i;\n", "import { diff, unmount, applyRef } from './index';\nimport { createVNode, Fragment } from '../create-element';\nimport { EMPTY_OBJ, EMPTY_ARR } from '../constants';\nimport { isArray } from '../util';\nimport { getDomSibling } from '../component';\n\n/**\n * Diff the children of a virtual node\n * @param {import('../internal').PreactElement} parentDom The DOM element whose\n * children are being diffed\n * @param {import('../internal').ComponentChildren[]} renderResult\n * @param {import('../internal').VNode} newParentVNode The new virtual\n * node whose children should be diff'ed against oldParentVNode\n * @param {import('../internal').VNode} oldParentVNode The old virtual\n * node whose children should be diff'ed against newParentVNode\n * @param {object} globalContext The current context object - modified by getChildContext\n * @param {boolean} isSvg Whether or not this DOM node is an SVG node\n * @param {Array<import('../internal').PreactElement>} excessDomChildren\n * @param {Array<import('../internal').Component>} commitQueue List of components\n * which have callbacks to invoke in commitRoot\n * @param {import('../internal').PreactElement} oldDom The current attached DOM\n * element any new dom elements should be placed around. Likely `null` on first\n * render (except when hydrating). Can be a sibling DOM element when diffing\n * Fragments that have siblings. In most cases, it starts out as `oldChildren[0]._dom`.\n * @param {boolean} isHydrating Whether or not we are in hydration\n * @param {Array<any>} refQueue an array of elements needed to invoke refs\n */\nexport function diffChildren(\n\tparentDom,\n\trenderResult,\n\tnewParentVNode,\n\toldParentVNode,\n\tglobalContext,\n\tisSvg,\n\texcessDomChildren,\n\tcommitQueue,\n\toldDom,\n\tisHydrating,\n\trefQueue\n) {\n\tlet i,\n\t\tj,\n\t\toldVNode,\n\t\tchildVNode,\n\t\tnewDom,\n\t\tfirstChildDom,\n\t\tskew = 0;\n\n\t// This is a compression of oldParentVNode!=null && oldParentVNode != EMPTY_OBJ && oldParentVNode._children || EMPTY_ARR\n\t// as EMPTY_OBJ._children should be `undefined`.\n\tlet oldChildren = (oldParentVNode && oldParentVNode._children) || EMPTY_ARR;\n\n\tlet oldChildrenLength = oldChildren.length,\n\t\tremainingOldChildren = oldChildrenLength,\n\t\tnewChildrenLength = renderResult.length;\n\n\tnewParentVNode._children = [];\n\tfor (i = 0; i < newChildrenLength; i++) {\n\t\tchildVNode = renderResult[i];\n\n\t\tif (\n\t\t\tchildVNode == null ||\n\t\t\ttypeof childVNode == 'boolean' ||\n\t\t\ttypeof childVNode == 'function'\n\t\t) {\n\t\t\tchildVNode = newParentVNode._children[i] = null;\n\t\t}\n\t\t// If this newVNode is being reused (e.g. <div>{reuse}{reuse}</div>) in the same diff,\n\t\t// or we are rendering a component (e.g. setState) copy the oldVNodes so it can have\n\t\t// it's own DOM & etc. pointers\n\t\telse if (\n\t\t\ttypeof childVNode == 'string' ||\n\t\t\ttypeof childVNode == 'number' ||\n\t\t\t// eslint-disable-next-line valid-typeof\n\t\t\ttypeof childVNode == 'bigint'\n\t\t) {\n\t\t\tchildVNode = newParentVNode._children[i] = createVNode(\n\t\t\t\tnull,\n\t\t\t\tchildVNode,\n\t\t\t\tnull,\n\t\t\t\tnull,\n\t\t\t\tchildVNode\n\t\t\t);\n\t\t} else if (isArray(childVNode)) {\n\t\t\tchildVNode = newParentVNode._children[i] = createVNode(\n\t\t\t\tFragment,\n\t\t\t\t{ children: childVNode },\n\t\t\t\tnull,\n\t\t\t\tnull,\n\t\t\t\tnull\n\t\t\t);\n\t\t} else if (childVNode._depth > 0) {\n\t\t\t// VNode is already in use, clone it. This can happen in the following\n\t\t\t// scenario:\n\t\t\t//   const reuse = <div />\n\t\t\t//   <div>{reuse}<span />{reuse}</div>\n\t\t\tchildVNode = newParentVNode._children[i] = createVNode(\n\t\t\t\tchildVNode.type,\n\t\t\t\tchildVNode.props,\n\t\t\t\tchildVNode.key,\n\t\t\t\tchildVNode.ref ? childVNode.ref : null,\n\t\t\t\tchildVNode._original\n\t\t\t);\n\t\t} else {\n\t\t\tchildVNode = newParentVNode._children[i] = childVNode;\n\t\t}\n\n\t\t// Terser removes the `continue` here and wraps the loop body\n\t\t// in a `if (childVNode) { ... } condition\n\t\tif (childVNode == null) {\n\t\t\toldVNode = oldChildren[i];\n\t\t\tif (oldVNode && oldVNode.key == null && oldVNode._dom) {\n\t\t\t\tif (oldVNode._dom == oldDom) {\n\t\t\t\t\toldDom = getDomSibling(oldVNode);\n\t\t\t\t}\n\n\t\t\t\tunmount(oldVNode, oldVNode, false);\n\t\t\t\toldChildren[i] = null;\n\t\t\t}\n\n\t\t\tcontinue;\n\t\t}\n\n\t\tchildVNode._parent = newParentVNode;\n\t\tchildVNode._depth = newParentVNode._depth + 1;\n\n\t\tlet skewedIndex = i + skew;\n\t\tconst matchingIndex = findMatchingIndex(\n\t\t\tchildVNode,\n\t\t\toldChildren,\n\t\t\tskewedIndex,\n\t\t\tremainingOldChildren\n\t\t);\n\n\t\tif (matchingIndex === -1) {\n\t\t\toldVNode = EMPTY_OBJ;\n\t\t} else {\n\t\t\toldVNode = oldChildren[matchingIndex] || EMPTY_OBJ;\n\t\t\toldChildren[matchingIndex] = undefined;\n\t\t\tremainingOldChildren--;\n\t\t}\n\n\t\t// Morph the old element into the new one, but don't append it to the dom yet\n\t\tdiff(\n\t\t\tparentDom,\n\t\t\tchildVNode,\n\t\t\toldVNode,\n\t\t\tglobalContext,\n\t\t\tisSvg,\n\t\t\texcessDomChildren,\n\t\t\tcommitQueue,\n\t\t\toldDom,\n\t\t\tisHydrating,\n\t\t\trefQueue\n\t\t);\n\n\t\tnewDom = childVNode._dom;\n\t\tif ((j = childVNode.ref) && oldVNode.ref != j) {\n\t\t\tif (oldVNode.ref) {\n\t\t\t\tapplyRef(oldVNode.ref, null, childVNode);\n\t\t\t}\n\t\t\trefQueue.push(j, childVNode._component || newDom, childVNode);\n\t\t}\n\n\t\tif (newDom != null) {\n\t\t\tif (firstChildDom == null) {\n\t\t\t\tfirstChildDom = newDom;\n\t\t\t}\n\n\t\t\tlet isMounting = oldVNode === EMPTY_OBJ || oldVNode._original === null;\n\t\t\tif (isMounting) {\n\t\t\t\tif (matchingIndex == -1) {\n\t\t\t\t\tskew--;\n\t\t\t\t}\n\t\t\t} else if (matchingIndex !== skewedIndex) {\n\t\t\t\tif (matchingIndex === skewedIndex + 1) {\n\t\t\t\t\tskew++;\n\t\t\t\t} else if (matchingIndex > skewedIndex) {\n\t\t\t\t\tif (remainingOldChildren > newChildrenLength - skewedIndex) {\n\t\t\t\t\t\tskew += matchingIndex - skewedIndex;\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// ### Change from keyed: I think this was missing from the algo...\n\t\t\t\t\t\tskew--;\n\t\t\t\t\t}\n\t\t\t\t} else if (matchingIndex < skewedIndex) {\n\t\t\t\t\tif (matchingIndex == skewedIndex - 1) {\n\t\t\t\t\t\tskew = matchingIndex - skewedIndex;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tskew = 0;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tskew = 0;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tskewedIndex = i + skew;\n\n\t\t\tif (\n\t\t\t\ttypeof childVNode.type == 'function' &&\n\t\t\t\t(matchingIndex !== skewedIndex ||\n\t\t\t\t\toldVNode._children === childVNode._children)\n\t\t\t) {\n\t\t\t\toldDom = reorderChildren(childVNode, oldDom, parentDom);\n\t\t\t} else if (\n\t\t\t\ttypeof childVNode.type != 'function' &&\n\t\t\t\t(matchingIndex !== skewedIndex || isMounting)\n\t\t\t) {\n\t\t\t\toldDom = placeChild(parentDom, newDom, oldDom);\n\t\t\t} else if (childVNode._nextDom !== undefined) {\n\t\t\t\t// Only Fragments or components that return Fragment like VNodes will\n\t\t\t\t// have a non-undefined _nextDom. Continue the diff from the sibling\n\t\t\t\t// of last DOM child of this child VNode\n\t\t\t\toldDom = childVNode._nextDom;\n\n\t\t\t\t// Eagerly cleanup _nextDom. We don't need to persist the value because\n\t\t\t\t// it is only used by `diffChildren` to determine where to resume the diff after\n\t\t\t\t// diffing Components and Fragments. Once we store it the nextDOM local var, we\n\t\t\t\t// can clean up the property\n\t\t\t\tchildVNode._nextDom = undefined;\n\t\t\t} else {\n\t\t\t\toldDom = newDom.nextSibling;\n\t\t\t}\n\n\t\t\tif (typeof newParentVNode.type == 'function') {\n\t\t\t\t// Because the newParentVNode is Fragment-like, we need to set it's\n\t\t\t\t// _nextDom property to the nextSibling of its last child DOM node.\n\t\t\t\t//\n\t\t\t\t// `oldDom` contains the correct value here because if the last child\n\t\t\t\t// is a Fragment-like, then oldDom has already been set to that child's _nextDom.\n\t\t\t\t// If the last child is a DOM VNode, then oldDom will be set to that DOM\n\t\t\t\t// node's nextSibling.\n\t\t\t\tnewParentVNode._nextDom = oldDom;\n\t\t\t}\n\t\t}\n\t}\n\n\tnewParentVNode._dom = firstChildDom;\n\n\t// Remove remaining oldChildren if there are any.\n\tfor (i = oldChildrenLength; i--; ) {\n\t\tif (oldChildren[i] != null) {\n\t\t\tif (\n\t\t\t\ttypeof newParentVNode.type == 'function' &&\n\t\t\t\toldChildren[i]._dom != null &&\n\t\t\t\toldChildren[i]._dom == newParentVNode._nextDom\n\t\t\t) {\n\t\t\t\t// If the newParentVNode.__nextDom points to a dom node that is about to\n\t\t\t\t// be unmounted, then get the next sibling of that vnode and set\n\t\t\t\t// _nextDom to it\n\n\t\t\t\tnewParentVNode._nextDom = oldChildren[i]._dom.nextSibling;\n\t\t\t}\n\n\t\t\tunmount(oldChildren[i], oldChildren[i]);\n\t\t}\n\t}\n}\n\nfunction reorderChildren(childVNode, oldDom, parentDom) {\n\t// Note: VNodes in nested suspended trees may be missing _children.\n\tlet c = childVNode._children;\n\n\tlet tmp = 0;\n\tfor (; c && tmp < c.length; tmp++) {\n\t\tlet vnode = c[tmp];\n\t\tif (vnode) {\n\t\t\t// We typically enter this code path on sCU bailout, where we copy\n\t\t\t// oldVNode._children to newVNode._children. If that is the case, we need\n\t\t\t// to update the old children's _parent pointer to point to the newVNode\n\t\t\t// (childVNode here).\n\t\t\tvnode._parent = childVNode;\n\n\t\t\tif (typeof vnode.type == 'function') {\n\t\t\t\toldDom = reorderChildren(vnode, oldDom, parentDom);\n\t\t\t} else {\n\t\t\t\toldDom = placeChild(parentDom, vnode._dom, oldDom);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn oldDom;\n}\n\n/**\n * Flatten and loop through the children of a virtual node\n * @param {import('../index').ComponentChildren} children The unflattened\n * children of a virtual node\n * @returns {import('../internal').VNode[]}\n */\nexport function toChildArray(children, out) {\n\tout = out || [];\n\tif (children == null || typeof children == 'boolean') {\n\t} else if (isArray(children)) {\n\t\tchildren.some(child => {\n\t\t\ttoChildArray(child, out);\n\t\t});\n\t} else {\n\t\tout.push(children);\n\t}\n\treturn out;\n}\n\nfunction placeChild(parentDom, newDom, oldDom) {\n\tif (oldDom == null || oldDom.parentNode !== parentDom) {\n\t\tparentDom.insertBefore(newDom, null);\n\t} else if (newDom != oldDom || newDom.parentNode == null) {\n\t\tparentDom.insertBefore(newDom, oldDom);\n\t}\n\n\treturn newDom.nextSibling;\n}\n\n/**\n * @param {import('../internal').VNode | string} childVNode\n * @param {import('../internal').VNode[]} oldChildren\n * @param {number} skewedIndex\n * @param {number} remainingOldChildren\n * @returns {number}\n */\nfunction findMatchingIndex(\n\tchildVNode,\n\toldChildren,\n\tskewedIndex,\n\tremainingOldChildren\n) {\n\tconst key = childVNode.key;\n\tconst type = childVNode.type;\n\tlet x = skewedIndex - 1;\n\tlet y = skewedIndex + 1;\n\tlet oldVNode = oldChildren[skewedIndex];\n\n\tif (\n\t\toldVNode === null ||\n\t\t(oldVNode && key == oldVNode.key && type === oldVNode.type)\n\t) {\n\t\treturn skewedIndex;\n\t} else if (remainingOldChildren > (oldVNode != null ? 1 : 0)) {\n\t\twhile (x >= 0 || y < oldChildren.length) {\n\t\t\tif (x >= 0) {\n\t\t\t\toldVNode = oldChildren[x];\n\t\t\t\tif (oldVNode && key == oldVNode.key && type === oldVNode.type) {\n\t\t\t\t\treturn x;\n\t\t\t\t}\n\t\t\t\tx--;\n\t\t\t}\n\n\t\t\tif (y < oldChildren.length) {\n\t\t\t\toldVNode = oldChildren[y];\n\t\t\t\tif (oldVNode && key == oldVNode.key && type === oldVNode.type) {\n\t\t\t\t\treturn y;\n\t\t\t\t}\n\t\t\t\ty++;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn -1;\n}\n", "import { IS_NON_DIMENSIONAL } from '../constants';\nimport options from '../options';\n\n/**\n * Diff the old and new properties of a VNode and apply changes to the DOM node\n * @param {import('../internal').PreactElement} dom The DOM node to apply\n * changes to\n * @param {object} newProps The new props\n * @param {object} oldProps The old props\n * @param {boolean} isSvg Whether or not this node is an SVG node\n * @param {boolean} hydrate Whether or not we are in hydration mode\n */\nexport function diffProps(dom, newProps, oldProps, isSvg, hydrate) {\n\tlet i;\n\n\tfor (i in oldProps) {\n\t\tif (i !== 'children' && i !== 'key' && !(i in newProps)) {\n\t\t\tsetProperty(dom, i, null, oldProps[i], isSvg);\n\t\t}\n\t}\n\n\tfor (i in newProps) {\n\t\tif (\n\t\t\t(!hydrate || typeof newProps[i] == 'function') &&\n\t\t\ti !== 'children' &&\n\t\t\ti !== 'key' &&\n\t\t\ti !== 'value' &&\n\t\t\ti !== 'checked' &&\n\t\t\toldProps[i] !== newProps[i]\n\t\t) {\n\t\t\tsetProperty(dom, i, newProps[i], oldProps[i], isSvg);\n\t\t}\n\t}\n}\n\nfunction setStyle(style, key, value) {\n\tif (key[0] === '-') {\n\t\tstyle.setProperty(key, value == null ? '' : value);\n\t} else if (value == null) {\n\t\tstyle[key] = '';\n\t} else if (typeof value != 'number' || IS_NON_DIMENSIONAL.test(key)) {\n\t\tstyle[key] = value;\n\t} else {\n\t\tstyle[key] = value + 'px';\n\t}\n}\n\n/**\n * Set a property value on a DOM node\n * @param {import('../internal').PreactElement} dom The DOM node to modify\n * @param {string} name The name of the property to set\n * @param {*} value The value to set the property to\n * @param {*} oldValue The old value the property had\n * @param {boolean} isSvg Whether or not this DOM node is an SVG node or not\n */\nexport function setProperty(dom, name, value, oldValue, isSvg) {\n\tlet useCapture;\n\n\to: if (name === 'style') {\n\t\tif (typeof value == 'string') {\n\t\t\tdom.style.cssText = value;\n\t\t} else {\n\t\t\tif (typeof oldValue == 'string') {\n\t\t\t\tdom.style.cssText = oldValue = '';\n\t\t\t}\n\n\t\t\tif (oldValue) {\n\t\t\t\tfor (name in oldValue) {\n\t\t\t\t\tif (!(value && name in value)) {\n\t\t\t\t\t\tsetStyle(dom.style, name, '');\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (value) {\n\t\t\t\tfor (name in value) {\n\t\t\t\t\tif (!oldValue || value[name] !== oldValue[name]) {\n\t\t\t\t\t\tsetStyle(dom.style, name, value[name]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t// Benchmark for comparison: https://esbench.com/bench/574c954bdb965b9a00965ac6\n\telse if (name[0] === 'o' && name[1] === 'n') {\n\t\tuseCapture = name !== (name = name.replace(/(PointerCapture)$|Capture$/, '$1'));\n\n\t\t// Infer correct casing for DOM built-in events:\n\t\tif (name.toLowerCase() in dom) name = name.toLowerCase().slice(2);\n\t\telse name = name.slice(2);\n\n\t\tif (!dom._listeners) dom._listeners = {};\n\t\tdom._listeners[name + useCapture] = value;\n\n\t\tif (value) {\n\t\t\tif (!oldValue) {\n\t\t\t\tconst handler = useCapture ? eventProxyCapture : eventProxy;\n\t\t\t\tdom.addEventListener(name, handler, useCapture);\n\t\t\t}\n\t\t} else {\n\t\t\tconst handler = useCapture ? eventProxyCapture : eventProxy;\n\t\t\tdom.removeEventListener(name, handler, useCapture);\n\t\t}\n\t} else if (name !== 'dangerouslySetInnerHTML') {\n\t\tif (isSvg) {\n\t\t\t// Normalize incorrect prop usage for SVG:\n\t\t\t// - xlink:href / xlinkHref --> href (xlink:href was removed from SVG and isn't needed)\n\t\t\t// - className --> class\n\t\t\tname = name.replace(/xlink(H|:h)/, 'h').replace(/sName$/, 's');\n\t\t} else if (\n\t\t\tname !== 'width' &&\n\t\t\tname !== 'height' &&\n\t\t\tname !== 'href' &&\n\t\t\tname !== 'list' &&\n\t\t\tname !== 'form' &&\n\t\t\t// Default value in browsers is `-1` and an empty string is\n\t\t\t// cast to `0` instead\n\t\t\tname !== 'tabIndex' &&\n\t\t\tname !== 'download' &&\n\t\t\tname !== 'rowSpan' &&\n\t\t\tname !== 'colSpan' &&\n\t\t\tname in dom\n\t\t) {\n\t\t\ttry {\n\t\t\t\tdom[name] = value == null ? '' : value;\n\t\t\t\t// labelled break is 1b smaller here than a return statement (sorry)\n\t\t\t\tbreak o;\n\t\t\t} catch (e) {}\n\t\t}\n\n\t\t// aria- and data- attributes have no boolean representation.\n\t\t// A `false` value is different from the attribute not being\n\t\t// present, so we can't remove it. For non-boolean aria\n\t\t// attributes we could treat false as a removal, but the\n\t\t// amount of exceptions would cost too many bytes. On top of\n\t\t// that other frameworks generally stringify `false`.\n\n\t\tif (typeof value === 'function') {\n\t\t\t// never serialize functions as attribute values\n\t\t} else if (value != null && (value !== false || name[4] === '-')) {\n\t\t\tdom.setAttribute(name, value);\n\t\t} else {\n\t\t\tdom.removeAttribute(name);\n\t\t}\n\t}\n}\n\n/**\n * Proxy an event to hooked event handlers\n * @param {Event} e The event object from the browser\n * @private\n */\nfunction eventProxy(e) {\n\treturn this._listeners[e.type + false](options.event ? options.event(e) : e);\n}\n\nfunction eventProxyCapture(e) {\n\treturn this._listeners[e.type + true](options.event ? options.event(e) : e);\n}\n", "import { EMPTY_OBJ } from '../constants';\nimport { Component, getDomSibling } from '../component';\nimport { Fragment } from '../create-element';\nimport { diffChildren } from './children';\nimport { diffProps, setProperty } from './props';\nimport { assign, isArray, removeNode, slice } from '../util';\nimport options from '../options';\n\n/**\n * Diff two virtual nodes and apply proper changes to the DOM\n * @param {import('../internal').PreactElement} parentDom The parent of the DOM element\n * @param {import('../internal').VNode} newVNode The new virtual node\n * @param {import('../internal').VNode} oldVNode The old virtual node\n * @param {object} globalContext The current context object. Modified by getChildContext\n * @param {boolean} isSvg Whether or not this element is an SVG node\n * @param {Array<import('../internal').PreactElement>} excessDomChildren\n * @param {Array<import('../internal').Component>} commitQueue List of components\n * which have callbacks to invoke in commitRoot\n * @param {import('../internal').PreactElement} oldDom The current attached DOM\n * element any new dom elements should be placed around. Likely `null` on first\n * render (except when hydrating). Can be a sibling DOM element when diffing\n * Fragments that have siblings. In most cases, it starts out as `oldChildren[0]._dom`.\n * @param {boolean} isHydrating Whether or not we are in hydration\n * @param {Array<any>} refQueue an array of elements needed to invoke refs\n */\nexport function diff(\n\tparentDom,\n\tnewVNode,\n\toldVNode,\n\tglobalContext,\n\tisSvg,\n\texcessDomChildren,\n\tcommitQueue,\n\toldDom,\n\tisHydrating,\n\trefQueue\n) {\n\tlet tmp,\n\t\tnewType = newVNode.type;\n\n\t// When passing through createElement it assigns the object\n\t// constructor as undefined. This to prevent JSON-injection.\n\tif (newVNode.constructor !== undefined) return null;\n\n\t// If the previous diff bailed out, resume creating/hydrating.\n\tif (oldVNode._hydrating != null) {\n\t\tisHydrating = oldVNode._hydrating;\n\t\toldDom = newVNode._dom = oldVNode._dom;\n\t\t// if we resume, we want the tree to be \"unlocked\"\n\t\tnewVNode._hydrating = null;\n\t\texcessDomChildren = [oldDom];\n\t}\n\n\tif ((tmp = options._diff)) tmp(newVNode);\n\n\touter: if (typeof newType == 'function') {\n\t\ttry {\n\t\t\tlet c, isNew, oldProps, oldState, snapshot, clearProcessingException;\n\t\t\tlet newProps = newVNode.props;\n\n\t\t\t// Necessary for createContext api. Setting this property will pass\n\t\t\t// the context value as `this.context` just for this component.\n\t\t\ttmp = newType.contextType;\n\t\t\tlet provider = tmp && globalContext[tmp._id];\n\t\t\tlet componentContext = tmp\n\t\t\t\t? provider\n\t\t\t\t\t? provider.props.value\n\t\t\t\t\t: tmp._defaultValue\n\t\t\t\t: globalContext;\n\n\t\t\t// Get component and set it to `c`\n\t\t\tif (oldVNode._component) {\n\t\t\t\tc = newVNode._component = oldVNode._component;\n\t\t\t\tclearProcessingException = c._processingException = c._pendingError;\n\t\t\t} else {\n\t\t\t\t// Instantiate the new component\n\t\t\t\tif ('prototype' in newType && newType.prototype.render) {\n\t\t\t\t\t// @ts-ignore The check above verifies that newType is suppose to be constructed\n\t\t\t\t\tnewVNode._component = c = new newType(newProps, componentContext); // eslint-disable-line new-cap\n\t\t\t\t} else {\n\t\t\t\t\t// @ts-ignore Trust me, Component implements the interface we want\n\t\t\t\t\tnewVNode._component = c = new Component(newProps, componentContext);\n\t\t\t\t\tc.constructor = newType;\n\t\t\t\t\tc.render = doRender;\n\t\t\t\t}\n\t\t\t\tif (provider) provider.sub(c);\n\n\t\t\t\tc.props = newProps;\n\t\t\t\tif (!c.state) c.state = {};\n\t\t\t\tc.context = componentContext;\n\t\t\t\tc._globalContext = globalContext;\n\t\t\t\tisNew = c._dirty = true;\n\t\t\t\tc._renderCallbacks = [];\n\t\t\t\tc._stateCallbacks = [];\n\t\t\t}\n\n\t\t\t// Invoke getDerivedStateFromProps\n\t\t\tif (c._nextState == null) {\n\t\t\t\tc._nextState = c.state;\n\t\t\t}\n\n\t\t\tif (newType.getDerivedStateFromProps != null) {\n\t\t\t\tif (c._nextState == c.state) {\n\t\t\t\t\tc._nextState = assign({}, c._nextState);\n\t\t\t\t}\n\n\t\t\t\tassign(\n\t\t\t\t\tc._nextState,\n\t\t\t\t\tnewType.getDerivedStateFromProps(newProps, c._nextState)\n\t\t\t\t);\n\t\t\t}\n\n\t\t\toldProps = c.props;\n\t\t\toldState = c.state;\n\t\t\tc._vnode = newVNode;\n\n\t\t\t// Invoke pre-render lifecycle methods\n\t\t\tif (isNew) {\n\t\t\t\tif (\n\t\t\t\t\tnewType.getDerivedStateFromProps == null &&\n\t\t\t\t\tc.componentWillMount != null\n\t\t\t\t) {\n\t\t\t\t\tc.componentWillMount();\n\t\t\t\t}\n\n\t\t\t\tif (c.componentDidMount != null) {\n\t\t\t\t\tc._renderCallbacks.push(c.componentDidMount);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (\n\t\t\t\t\tnewType.getDerivedStateFromProps == null &&\n\t\t\t\t\tnewProps !== oldProps &&\n\t\t\t\t\tc.componentWillReceiveProps != null\n\t\t\t\t) {\n\t\t\t\t\tc.componentWillReceiveProps(newProps, componentContext);\n\t\t\t\t}\n\n\t\t\t\tif (\n\t\t\t\t\t!c._force &&\n\t\t\t\t\t((c.shouldComponentUpdate != null &&\n\t\t\t\t\t\tc.shouldComponentUpdate(\n\t\t\t\t\t\t\tnewProps,\n\t\t\t\t\t\t\tc._nextState,\n\t\t\t\t\t\t\tcomponentContext\n\t\t\t\t\t\t) === false) ||\n\t\t\t\t\t\tnewVNode._original === oldVNode._original)\n\t\t\t\t) {\n\t\t\t\t\t// More info about this here: https://gist.github.com/JoviDeCroock/bec5f2ce93544d2e6070ef8e0036e4e8\n\t\t\t\t\tif (newVNode._original !== oldVNode._original) {\n\t\t\t\t\t\t// When we are dealing with a bail because of sCU we have to update\n\t\t\t\t\t\t// the props, state and dirty-state.\n\t\t\t\t\t\t// when we are dealing with strict-equality we don't as the child could still\n\t\t\t\t\t\t// be dirtied see #3883\n\t\t\t\t\t\tc.props = newProps;\n\t\t\t\t\t\tc.state = c._nextState;\n\t\t\t\t\t\tc._dirty = false;\n\t\t\t\t\t}\n\n\t\t\t\t\tnewVNode._dom = oldVNode._dom;\n\t\t\t\t\tnewVNode._children = oldVNode._children;\n\t\t\t\t\tnewVNode._children.forEach(vnode => {\n\t\t\t\t\t\tif (vnode) vnode._parent = newVNode;\n\t\t\t\t\t});\n\n\t\t\t\t\tfor (let i = 0; i < c._stateCallbacks.length; i++) {\n\t\t\t\t\t\tc._renderCallbacks.push(c._stateCallbacks[i]);\n\t\t\t\t\t}\n\t\t\t\t\tc._stateCallbacks = [];\n\n\t\t\t\t\tif (c._renderCallbacks.length) {\n\t\t\t\t\t\tcommitQueue.push(c);\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak outer;\n\t\t\t\t}\n\n\t\t\t\tif (c.componentWillUpdate != null) {\n\t\t\t\t\tc.componentWillUpdate(newProps, c._nextState, componentContext);\n\t\t\t\t}\n\n\t\t\t\tif (c.componentDidUpdate != null) {\n\t\t\t\t\tc._renderCallbacks.push(() => {\n\t\t\t\t\t\tc.componentDidUpdate(oldProps, oldState, snapshot);\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tc.context = componentContext;\n\t\t\tc.props = newProps;\n\t\t\tc._parentDom = parentDom;\n\t\t\tc._force = false;\n\n\t\t\tlet renderHook = options._render,\n\t\t\t\tcount = 0;\n\t\t\tif ('prototype' in newType && newType.prototype.render) {\n\t\t\t\tc.state = c._nextState;\n\t\t\t\tc._dirty = false;\n\n\t\t\t\tif (renderHook) renderHook(newVNode);\n\n\t\t\t\ttmp = c.render(c.props, c.state, c.context);\n\n\t\t\t\tfor (let i = 0; i < c._stateCallbacks.length; i++) {\n\t\t\t\t\tc._renderCallbacks.push(c._stateCallbacks[i]);\n\t\t\t\t}\n\t\t\t\tc._stateCallbacks = [];\n\t\t\t} else {\n\t\t\t\tdo {\n\t\t\t\t\tc._dirty = false;\n\t\t\t\t\tif (renderHook) renderHook(newVNode);\n\n\t\t\t\t\ttmp = c.render(c.props, c.state, c.context);\n\n\t\t\t\t\t// Handle setState called in render, see #2553\n\t\t\t\t\tc.state = c._nextState;\n\t\t\t\t} while (c._dirty && ++count < 25);\n\t\t\t}\n\n\t\t\t// Handle setState called in render, see #2553\n\t\t\tc.state = c._nextState;\n\n\t\t\tif (c.getChildContext != null) {\n\t\t\t\tglobalContext = assign(assign({}, globalContext), c.getChildContext());\n\t\t\t}\n\n\t\t\tif (!isNew && c.getSnapshotBeforeUpdate != null) {\n\t\t\t\tsnapshot = c.getSnapshotBeforeUpdate(oldProps, oldState);\n\t\t\t}\n\n\t\t\tlet isTopLevelFragment =\n\t\t\t\ttmp != null && tmp.type === Fragment && tmp.key == null;\n\t\t\tlet renderResult = isTopLevelFragment ? tmp.props.children : tmp;\n\n\t\t\tdiffChildren(\n\t\t\t\tparentDom,\n\t\t\t\tisArray(renderResult) ? renderResult : [renderResult],\n\t\t\t\tnewVNode,\n\t\t\t\toldVNode,\n\t\t\t\tglobalContext,\n\t\t\t\tisSvg,\n\t\t\t\texcessDomChildren,\n\t\t\t\tcommitQueue,\n\t\t\t\toldDom,\n\t\t\t\tisHydrating,\n\t\t\t\trefQueue\n\t\t\t);\n\n\t\t\tc.base = newVNode._dom;\n\n\t\t\t// We successfully rendered this VNode, unset any stored hydration/bailout state:\n\t\t\tnewVNode._hydrating = null;\n\n\t\t\tif (c._renderCallbacks.length) {\n\t\t\t\tcommitQueue.push(c);\n\t\t\t}\n\n\t\t\tif (clearProcessingException) {\n\t\t\t\tc._pendingError = c._processingException = null;\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tnewVNode._original = null;\n\t\t\t// if hydrating or creating initial tree, bailout preserves DOM:\n\t\t\tif (isHydrating || excessDomChildren != null) {\n\t\t\t\tnewVNode._dom = oldDom;\n\t\t\t\tnewVNode._hydrating = !!isHydrating;\n\t\t\t\texcessDomChildren[excessDomChildren.indexOf(oldDom)] = null;\n\t\t\t\t// ^ could possibly be simplified to:\n\t\t\t\t// excessDomChildren.length = 0;\n\t\t\t}\n\t\t\toptions._catchError(e, newVNode, oldVNode);\n\t\t}\n\t} else if (\n\t\texcessDomChildren == null &&\n\t\tnewVNode._original === oldVNode._original\n\t) {\n\t\tnewVNode._children = oldVNode._children;\n\t\tnewVNode._dom = oldVNode._dom;\n\t} else {\n\t\tnewVNode._dom = diffElementNodes(\n\t\t\toldVNode._dom,\n\t\t\tnewVNode,\n\t\t\toldVNode,\n\t\t\tglobalContext,\n\t\t\tisSvg,\n\t\t\texcessDomChildren,\n\t\t\tcommitQueue,\n\t\t\tisHydrating,\n\t\t\trefQueue\n\t\t);\n\t}\n\n\tif ((tmp = options.diffed)) tmp(newVNode);\n}\n\n/**\n * @param {Array<import('../internal').Component>} commitQueue List of components\n * which have callbacks to invoke in commitRoot\n * @param {import('../internal').VNode} root\n */\nexport function commitRoot(commitQueue, root, refQueue) {\n\tfor (let i = 0; i < refQueue.length; i++) {\n\t\tapplyRef(refQueue[i], refQueue[++i], refQueue[++i]);\n\t}\n\n\tif (options._commit) options._commit(root, commitQueue);\n\n\tcommitQueue.some(c => {\n\t\ttry {\n\t\t\t// @ts-ignore Reuse the commitQueue variable here so the type changes\n\t\t\tcommitQueue = c._renderCallbacks;\n\t\t\tc._renderCallbacks = [];\n\t\t\tcommitQueue.some(cb => {\n\t\t\t\t// @ts-ignore See above ts-ignore on commitQueue\n\t\t\t\tcb.call(c);\n\t\t\t});\n\t\t} catch (e) {\n\t\t\toptions._catchError(e, c._vnode);\n\t\t}\n\t});\n}\n\n/**\n * Diff two virtual nodes representing DOM element\n * @param {import('../internal').PreactElement} dom The DOM element representing\n * the virtual nodes being diffed\n * @param {import('../internal').VNode} newVNode The new virtual node\n * @param {import('../internal').VNode} oldVNode The old virtual node\n * @param {object} globalContext The current context object\n * @param {boolean} isSvg Whether or not this DOM node is an SVG node\n * @param {*} excessDomChildren\n * @param {Array<import('../internal').Component>} commitQueue List of components\n * which have callbacks to invoke in commitRoot\n * @param {boolean} isHydrating Whether or not we are in hydration\n * @param {Array<any>} refQueue an array of elements needed to invoke refs\n * @returns {import('../internal').PreactElement}\n */\nfunction diffElementNodes(\n\tdom,\n\tnewVNode,\n\toldVNode,\n\tglobalContext,\n\tisSvg,\n\texcessDomChildren,\n\tcommitQueue,\n\tisHydrating,\n\trefQueue\n) {\n\tlet oldProps = oldVNode.props;\n\tlet newProps = newVNode.props;\n\tlet nodeType = newVNode.type;\n\tlet i = 0;\n\n\t// Tracks entering and exiting SVG namespace when descending through the tree.\n\tif (nodeType === 'svg') isSvg = true;\n\n\tif (excessDomChildren != null) {\n\t\tfor (; i < excessDomChildren.length; i++) {\n\t\t\tconst child = excessDomChildren[i];\n\n\t\t\t// if newVNode matches an element in excessDomChildren or the `dom`\n\t\t\t// argument matches an element in excessDomChildren, remove it from\n\t\t\t// excessDomChildren so it isn't later removed in diffChildren\n\t\t\tif (\n\t\t\t\tchild &&\n\t\t\t\t'setAttribute' in child === !!nodeType &&\n\t\t\t\t(nodeType ? child.localName === nodeType : child.nodeType === 3)\n\t\t\t) {\n\t\t\t\tdom = child;\n\t\t\t\texcessDomChildren[i] = null;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\tif (dom == null) {\n\t\tif (nodeType === null) {\n\t\t\t// @ts-ignore createTextNode returns Text, we expect PreactElement\n\t\t\treturn document.createTextNode(newProps);\n\t\t}\n\n\t\tif (isSvg) {\n\t\t\tdom = document.createElementNS(\n\t\t\t\t'http://www.w3.org/2000/svg',\n\t\t\t\t// @ts-ignore We know `newVNode.type` is a string\n\t\t\t\tnodeType\n\t\t\t);\n\t\t} else {\n\t\t\tdom = document.createElement(\n\t\t\t\t// @ts-ignore We know `newVNode.type` is a string\n\t\t\t\tnodeType,\n\t\t\t\tnewProps.is && newProps\n\t\t\t);\n\t\t}\n\n\t\t// we created a new parent, so none of the previously attached children can be reused:\n\t\texcessDomChildren = null;\n\t\t// we are creating a new node, so we can assume this is a new subtree (in case we are hydrating), this deopts the hydrate\n\t\tisHydrating = false;\n\t}\n\n\tif (nodeType === null) {\n\t\t// During hydration, we still have to split merged text from SSR'd HTML.\n\t\tif (oldProps !== newProps && (!isHydrating || dom.data !== newProps)) {\n\t\t\tdom.data = newProps;\n\t\t}\n\t} else {\n\t\t// If excessDomChildren was not null, repopulate it with the current element's children:\n\t\texcessDomChildren = excessDomChildren && slice.call(dom.childNodes);\n\n\t\toldProps = oldVNode.props || EMPTY_OBJ;\n\n\t\tlet oldHtml = oldProps.dangerouslySetInnerHTML;\n\t\tlet newHtml = newProps.dangerouslySetInnerHTML;\n\n\t\t// During hydration, props are not diffed at all (including dangerouslySetInnerHTML)\n\t\t// @TODO we should warn in debug mode when props don't match here.\n\t\tif (!isHydrating) {\n\t\t\t// But, if we are in a situation where we are using existing DOM (e.g. replaceNode)\n\t\t\t// we should read the existing DOM attributes to diff them\n\t\t\tif (excessDomChildren != null) {\n\t\t\t\toldProps = {};\n\t\t\t\tfor (i = 0; i < dom.attributes.length; i++) {\n\t\t\t\t\toldProps[dom.attributes[i].name] = dom.attributes[i].value;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (newHtml || oldHtml) {\n\t\t\t\t// Avoid re-applying the same '__html' if it did not changed between re-render\n\t\t\t\tif (\n\t\t\t\t\t!newHtml ||\n\t\t\t\t\t((!oldHtml || newHtml.__html != oldHtml.__html) &&\n\t\t\t\t\t\tnewHtml.__html !== dom.innerHTML)\n\t\t\t\t) {\n\t\t\t\t\tdom.innerHTML = (newHtml && newHtml.__html) || '';\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tdiffProps(dom, newProps, oldProps, isSvg, isHydrating);\n\n\t\t// If the new vnode didn't have dangerouslySetInnerHTML, diff its children\n\t\tif (newHtml) {\n\t\t\tnewVNode._children = [];\n\t\t} else {\n\t\t\ti = newVNode.props.children;\n\t\t\tdiffChildren(\n\t\t\t\tdom,\n\t\t\t\tisArray(i) ? i : [i],\n\t\t\t\tnewVNode,\n\t\t\t\toldVNode,\n\t\t\t\tglobalContext,\n\t\t\t\tisSvg && nodeType !== 'foreignObject',\n\t\t\t\texcessDomChildren,\n\t\t\t\tcommitQueue,\n\t\t\t\texcessDomChildren\n\t\t\t\t\t? excessDomChildren[0]\n\t\t\t\t\t: oldVNode._children && getDomSibling(oldVNode, 0),\n\t\t\t\tisHydrating,\n\t\t\t\trefQueue\n\t\t\t);\n\n\t\t\t// Remove children that are not part of any vnode.\n\t\t\tif (excessDomChildren != null) {\n\t\t\t\tfor (i = excessDomChildren.length; i--; ) {\n\t\t\t\t\tif (excessDomChildren[i] != null) removeNode(excessDomChildren[i]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// (as above, don't diff props during hydration)\n\t\tif (!isHydrating) {\n\t\t\tif (\n\t\t\t\t'value' in newProps &&\n\t\t\t\t(i = newProps.value) !== undefined &&\n\t\t\t\t// #2756 For the <progress>-element the initial value is 0,\n\t\t\t\t// despite the attribute not being present. When the attribute\n\t\t\t\t// is missing the progress bar is treated as indeterminate.\n\t\t\t\t// To fix that we'll always update it when it is 0 for progress elements\n\t\t\t\t(i !== dom.value ||\n\t\t\t\t\t(nodeType === 'progress' && !i) ||\n\t\t\t\t\t// This is only for IE 11 to fix <select> value not being updated.\n\t\t\t\t\t// To avoid a stale select value we need to set the option.value\n\t\t\t\t\t// again, which triggers IE11 to re-evaluate the select value\n\t\t\t\t\t(nodeType === 'option' && i !== oldProps.value))\n\t\t\t) {\n\t\t\t\tsetProperty(dom, 'value', i, oldProps.value, false);\n\t\t\t}\n\t\t\tif (\n\t\t\t\t'checked' in newProps &&\n\t\t\t\t(i = newProps.checked) !== undefined &&\n\t\t\t\ti !== dom.checked\n\t\t\t) {\n\t\t\t\tsetProperty(dom, 'checked', i, oldProps.checked, false);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn dom;\n}\n\n/**\n * Invoke or update a ref, depending on whether it is a function or object ref.\n * @param {object|function} ref\n * @param {any} value\n * @param {import('../internal').VNode} vnode\n */\nexport function applyRef(ref, value, vnode) {\n\ttry {\n\t\tif (typeof ref == 'function') ref(value);\n\t\telse ref.current = value;\n\t} catch (e) {\n\t\toptions._catchError(e, vnode);\n\t}\n}\n\n/**\n * Unmount a virtual node from the tree and apply DOM changes\n * @param {import('../internal').VNode} vnode The virtual node to unmount\n * @param {import('../internal').VNode} parentVNode The parent of the VNode that\n * initiated the unmount\n * @param {boolean} [skipRemove] Flag that indicates that a parent node of the\n * current element is already detached from the DOM.\n */\nexport function unmount(vnode, parentVNode, skipRemove) {\n\tlet r;\n\tif (options.unmount) options.unmount(vnode);\n\n\tif ((r = vnode.ref)) {\n\t\tif (!r.current || r.current === vnode._dom) {\n\t\t\tapplyRef(r, null, parentVNode);\n\t\t}\n\t}\n\n\tif ((r = vnode._component) != null) {\n\t\tif (r.componentWillUnmount) {\n\t\t\ttry {\n\t\t\t\tr.componentWillUnmount();\n\t\t\t} catch (e) {\n\t\t\t\toptions._catchError(e, parentVNode);\n\t\t\t}\n\t\t}\n\n\t\tr.base = r._parentDom = null;\n\t\tvnode._component = undefined;\n\t}\n\n\tif ((r = vnode._children)) {\n\t\tfor (let i = 0; i < r.length; i++) {\n\t\t\tif (r[i]) {\n\t\t\t\tunmount(\n\t\t\t\t\tr[i],\n\t\t\t\t\tparentVNode,\n\t\t\t\t\tskipRemove || typeof vnode.type !== 'function'\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (!skipRemove && vnode._dom != null) {\n\t\tremoveNode(vnode._dom);\n\t}\n\n\t// Must be set to `undefined` to properly clean up `_nextDom`\n\t// for which `null` is a valid value. See comment in `create-element.js`\n\tvnode._parent = vnode._dom = vnode._nextDom = undefined;\n}\n\n/** The `.render()` method for a PFC backing instance. */\nfunction doRender(props, state, context) {\n\treturn this.constructor(props, context);\n}\n", "import { EMPTY_OBJ } from './constants';\nimport { commitRoot, diff } from './diff/index';\nimport { createElement, Fragment } from './create-element';\nimport options from './options';\nimport { slice } from './util';\n\n/**\n * Render a Preact virtual node into a DOM element\n * @param {import('./internal').ComponentChild} vnode The virtual node to render\n * @param {import('./internal').PreactElement} parentDom The DOM element to\n * render into\n * @param {import('./internal').PreactElement | object} [replaceNode] Optional: Attempt to re-use an\n * existing DOM tree rooted at `replaceNode`\n */\nexport function render(vnode, parentDom, replaceNode) {\n\tif (options._root) options._root(vnode, parentDom);\n\n\t// We abuse the `replaceNode` parameter in `hydrate()` to signal if we are in\n\t// hydration mode or not by passing the `hydrate` function instead of a DOM\n\t// element..\n\tlet isHydrating = typeof replaceNode === 'function';\n\n\t// To be able to support calling `render()` multiple times on the same\n\t// DOM node, we need to obtain a reference to the previous tree. We do\n\t// this by assigning a new `_children` property to DOM nodes which points\n\t// to the last rendered tree. By default this property is not present, which\n\t// means that we are mounting a new tree for the first time.\n\tlet oldVNode = isHydrating\n\t\t? null\n\t\t: (replaceNode && replaceNode._children) || parentDom._children;\n\n\tvnode = ((!isHydrating && replaceNode) || parentDom)._children =\n\t\tcreateElement(Fragment, null, [vnode]);\n\n\t// List of effects that need to be called after diffing.\n\tlet commitQueue = [],\n\t\trefQueue = [];\n\tdiff(\n\t\tparentDom,\n\t\t// Determine the new vnode tree and store it on the DOM element on\n\t\t// our custom `_children` property.\n\t\tvnode,\n\t\toldVNode || EMPTY_OBJ,\n\t\tEMPTY_OBJ,\n\t\tparentDom.ownerSVGElement !== undefined,\n\t\t!isHydrating && replaceNode\n\t\t\t? [replaceNode]\n\t\t\t: oldVNode\n\t\t\t? null\n\t\t\t: parentDom.firstChild\n\t\t\t? slice.call(parentDom.childNodes)\n\t\t\t: null,\n\t\tcommitQueue,\n\t\t!isHydrating && replaceNode\n\t\t\t? replaceNode\n\t\t\t: oldVNode\n\t\t\t? oldVNode._dom\n\t\t\t: parentDom.firstChild,\n\t\tisHydrating,\n\t\trefQueue\n\t);\n\n\t// Flush all queued effects\n\tcommitRoot(commitQueue, vnode, refQueue);\n}\n\n/**\n * Update an existing DOM element with data from a Preact virtual node\n * @param {import('./internal').ComponentChild} vnode The virtual node to render\n * @param {import('./internal').PreactElement} parentDom The DOM element to\n * update\n */\nexport function hydrate(vnode, parentDom) {\n\trender(vnode, parentDom, hydrate);\n}\n", "import { assign, slice } from './util';\nimport { createVNode } from './create-element';\n\n/**\n * Clones the given VNode, optionally adding attributes/props and replacing its children.\n * @param {import('./internal').VNode} vnode The virtual DOM element to clone\n * @param {object} props Attributes/props to add when cloning\n * @param {Array<import('./internal').ComponentChildren>} rest Any additional arguments will be used as replacement children.\n * @returns {import('./internal').VNode}\n */\nexport function cloneElement(vnode, props, children) {\n\tlet normalizedProps = assign({}, vnode.props),\n\t\tkey,\n\t\tref,\n\t\ti;\n\n\tlet defaultProps;\n\n\tif (vnode.type && vnode.type.defaultProps) {\n\t\tdefaultProps = vnode.type.defaultProps;\n\t}\n\n\tfor (i in props) {\n\t\tif (i == 'key') key = props[i];\n\t\telse if (i == 'ref') ref = props[i];\n\t\telse if (props[i] === undefined && defaultProps !== undefined) {\n\t\t\tnormalizedProps[i] = defaultProps[i];\n\t\t} else {\n\t\t\tnormalizedProps[i] = props[i];\n\t\t}\n\t}\n\n\tif (arguments.length > 2) {\n\t\tnormalizedProps.children =\n\t\t\targuments.length > 3 ? slice.call(arguments, 2) : children;\n\t}\n\n\treturn createVNode(\n\t\tvnode.type,\n\t\tnormalizedProps,\n\t\tkey || vnode.key,\n\t\tref || vnode.ref,\n\t\tnull\n\t);\n}\n", "/**\n * Find the closest error boundary to a thrown error and call it\n * @param {object} error The thrown value\n * @param {import('../internal').VNode} vnode The vnode that threw\n * the error that was caught (except for unmounting when this parameter\n * is the highest parent that was being unmounted)\n * @param {import('../internal').VNode} [oldVNode]\n * @param {import('../internal').ErrorInfo} [errorInfo]\n */\nexport function _catchError(error, vnode, oldVNode, errorInfo) {\n\t/** @type {import('../internal').Component} */\n\tlet component, ctor, handled;\n\n\tfor (; (vnode = vnode._parent); ) {\n\t\tif ((component = vnode._component) && !component._processingException) {\n\t\t\ttry {\n\t\t\t\tctor = component.constructor;\n\n\t\t\t\tif (ctor && ctor.getDerivedStateFromError != null) {\n\t\t\t\t\tcomponent.setState(ctor.getDerivedStateFromError(error));\n\t\t\t\t\thandled = component._dirty;\n\t\t\t\t}\n\n\t\t\t\tif (component.componentDidCatch != null) {\n\t\t\t\t\tcomponent.componentDidCatch(error, errorInfo || {});\n\t\t\t\t\thandled = component._dirty;\n\t\t\t\t}\n\n\t\t\t\t// This is an error boundary. Mark it as having bailed out, and whether it was mid-hydration.\n\t\t\t\tif (handled) {\n\t\t\t\t\treturn (component._pendingError = component);\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\terror = e;\n\t\t\t}\n\t\t}\n\t}\n\n\tthrow error;\n}\n", "import { options } from 'preact';\n\n/** @type {number} */\nlet currentIndex;\n\n/** @type {import('./internal').Component} */\nlet currentComponent;\n\n/** @type {import('./internal').Component} */\nlet previousComponent;\n\n/** @type {number} */\nlet currentHook = 0;\n\n/** @type {Array<import('./internal').Component>} */\nlet afterPaintEffects = [];\n\nlet EMPTY = [];\n\nlet oldBeforeDiff = options._diff;\nlet oldBeforeRender = options._render;\nlet oldAfterDiff = options.diffed;\nlet oldCommit = options._commit;\nlet oldBeforeUnmount = options.unmount;\n\nconst RAF_TIMEOUT = 100;\nlet prevRaf;\n\noptions._diff = vnode => {\n\tcurrentComponent = null;\n\tif (oldBeforeDiff) oldBeforeDiff(vnode);\n};\n\noptions._render = vnode => {\n\tif (oldBeforeRender) oldBeforeRender(vnode);\n\n\tcurrentComponent = vnode._component;\n\tcurrentIndex = 0;\n\n\tconst hooks = currentComponent.__hooks;\n\tif (hooks) {\n\t\tif (previousComponent === currentComponent) {\n\t\t\thooks._pendingEffects = [];\n\t\t\tcurrentComponent._renderCallbacks = [];\n\t\t\thooks._list.forEach(hookItem => {\n\t\t\t\tif (hookItem._nextValue) {\n\t\t\t\t\thookItem._value = hookItem._nextValue;\n\t\t\t\t}\n\t\t\t\thookItem._pendingValue = EMPTY;\n\t\t\t\thookItem._nextValue = hookItem._pendingArgs = undefined;\n\t\t\t});\n\t\t} else {\n\t\t\thooks._pendingEffects.forEach(invokeCleanup);\n\t\t\thooks._pendingEffects.forEach(invokeEffect);\n\t\t\thooks._pendingEffects = [];\n\t\t\tcurrentIndex = 0;\n\t\t}\n\t}\n\tpreviousComponent = currentComponent;\n};\n\noptions.diffed = vnode => {\n\tif (oldAfterDiff) oldAfterDiff(vnode);\n\n\tconst c = vnode._component;\n\tif (c && c.__hooks) {\n\t\tif (c.__hooks._pendingEffects.length) afterPaint(afterPaintEffects.push(c));\n\t\tc.__hooks._list.forEach(hookItem => {\n\t\t\tif (hookItem._pendingArgs) {\n\t\t\t\thookItem._args = hookItem._pendingArgs;\n\t\t\t}\n\t\t\tif (hookItem._pendingValue !== EMPTY) {\n\t\t\t\thookItem._value = hookItem._pendingValue;\n\t\t\t}\n\t\t\thookItem._pendingArgs = undefined;\n\t\t\thookItem._pendingValue = EMPTY;\n\t\t});\n\t}\n\tpreviousComponent = currentComponent = null;\n};\n\noptions._commit = (vnode, commitQueue) => {\n\tcommitQueue.some(component => {\n\t\ttry {\n\t\t\tcomponent._renderCallbacks.forEach(invokeCleanup);\n\t\t\tcomponent._renderCallbacks = component._renderCallbacks.filter(cb =>\n\t\t\t\tcb._value ? invokeEffect(cb) : true\n\t\t\t);\n\t\t} catch (e) {\n\t\t\tcommitQueue.some(c => {\n\t\t\t\tif (c._renderCallbacks) c._renderCallbacks = [];\n\t\t\t});\n\t\t\tcommitQueue = [];\n\t\t\toptions._catchError(e, component._vnode);\n\t\t}\n\t});\n\n\tif (oldCommit) oldCommit(vnode, commitQueue);\n};\n\noptions.unmount = vnode => {\n\tif (oldBeforeUnmount) oldBeforeUnmount(vnode);\n\n\tconst c = vnode._component;\n\tif (c && c.__hooks) {\n\t\tlet hasErrored;\n\t\tc.__hooks._list.forEach(s => {\n\t\t\ttry {\n\t\t\t\tinvokeCleanup(s);\n\t\t\t} catch (e) {\n\t\t\t\thasErrored = e;\n\t\t\t}\n\t\t});\n\t\tc.__hooks = undefined;\n\t\tif (hasErrored) options._catchError(hasErrored, c._vnode);\n\t}\n};\n\n/**\n * Get a hook's state from the currentComponent\n * @param {number} index The index of the hook to get\n * @param {number} type The index of the hook to get\n * @returns {any}\n */\nfunction getHookState(index, type) {\n\tif (options._hook) {\n\t\toptions._hook(currentComponent, index, currentHook || type);\n\t}\n\tcurrentHook = 0;\n\n\t// Largely inspired by:\n\t// * https://github.com/michael-klein/funcy.js/blob/f6be73468e6ec46b0ff5aa3cc4c9baf72a29025a/src/hooks/core_hooks.mjs\n\t// * https://github.com/michael-klein/funcy.js/blob/650beaa58c43c33a74820a3c98b3c7079cf2e333/src/renderer.mjs\n\t// Other implementations to look at:\n\t// * https://codesandbox.io/s/mnox05qp8\n\tconst hooks =\n\t\tcurrentComponent.__hooks ||\n\t\t(currentComponent.__hooks = {\n\t\t\t_list: [],\n\t\t\t_pendingEffects: []\n\t\t});\n\n\tif (index >= hooks._list.length) {\n\t\thooks._list.push({ _pendingValue: EMPTY });\n\t}\n\treturn hooks._list[index];\n}\n\n/**\n * @param {import('./index').StateUpdater<any>} [initialState]\n */\nexport function useState(initialState) {\n\tcurrentHook = 1;\n\treturn useReducer(invokeOrReturn, initialState);\n}\n\n/**\n * @param {import('./index').Reducer<any, any>} reducer\n * @param {import('./index').StateUpdater<any>} initialState\n * @param {(initialState: any) => void} [init]\n * @returns {[ any, (state: any) => void ]}\n */\nexport function useReducer(reducer, initialState, init) {\n\t/** @type {import('./internal').ReducerHookState} */\n\tconst hookState = getHookState(currentIndex++, 2);\n\thookState._reducer = reducer;\n\tif (!hookState._component) {\n\t\thookState._value = [\n\t\t\t!init ? invokeOrReturn(undefined, initialState) : init(initialState),\n\n\t\t\taction => {\n\t\t\t\tconst currentValue = hookState._nextValue\n\t\t\t\t\t? hookState._nextValue[0]\n\t\t\t\t\t: hookState._value[0];\n\t\t\t\tconst nextValue = hookState._reducer(currentValue, action);\n\n\t\t\t\tif (currentValue !== nextValue) {\n\t\t\t\t\thookState._nextValue = [nextValue, hookState._value[1]];\n\t\t\t\t\thookState._component.setState({});\n\t\t\t\t}\n\t\t\t}\n\t\t];\n\n\t\thookState._component = currentComponent;\n\n\t\tif (!currentComponent._hasScuFromHooks) {\n\t\t\tcurrentComponent._hasScuFromHooks = true;\n\t\t\tlet prevScu = currentComponent.shouldComponentUpdate;\n\t\t\tconst prevCWU = currentComponent.componentWillUpdate;\n\n\t\t\t// If we're dealing with a forced update `shouldComponentUpdate` will\n\t\t\t// not be called. But we use that to update the hook values, so we\n\t\t\t// need to call it.\n\t\t\tcurrentComponent.componentWillUpdate = function (p, s, c) {\n\t\t\t\tif (this._force) {\n\t\t\t\t\tlet tmp = prevScu;\n\t\t\t\t\t// Clear to avoid other sCU hooks from being called\n\t\t\t\t\tprevScu = undefined;\n\t\t\t\t\tupdateHookState(p, s, c);\n\t\t\t\t\tprevScu = tmp;\n\t\t\t\t}\n\n\t\t\t\tif (prevCWU) prevCWU.call(this, p, s, c);\n\t\t\t};\n\n\t\t\t// This SCU has the purpose of bailing out after repeated updates\n\t\t\t// to stateful hooks.\n\t\t\t// we store the next value in _nextValue[0] and keep doing that for all\n\t\t\t// state setters, if we have next states and\n\t\t\t// all next states within a component end up being equal to their original state\n\t\t\t// we are safe to bail out for this specific component.\n\t\t\t/**\n\t\t\t *\n\t\t\t * @type {import('./internal').Component[\"shouldComponentUpdate\"]}\n\t\t\t */\n\t\t\t// @ts-ignore - We don't use TS to downtranspile\n\t\t\t// eslint-disable-next-line no-inner-declarations\n\t\t\tfunction updateHookState(p, s, c) {\n\t\t\t\tif (!hookState._component.__hooks) return true;\n\n\t\t\t\tconst stateHooks = hookState._component.__hooks._list.filter(\n\t\t\t\t\tx => x._component\n\t\t\t\t);\n\t\t\t\tconst allHooksEmpty = stateHooks.every(x => !x._nextValue);\n\t\t\t\t// When we have no updated hooks in the component we invoke the previous SCU or\n\t\t\t\t// traverse the VDOM tree further.\n\t\t\t\tif (allHooksEmpty) {\n\t\t\t\t\treturn prevScu ? prevScu.call(this, p, s, c) : true;\n\t\t\t\t}\n\n\t\t\t\t// We check whether we have components with a nextValue set that\n\t\t\t\t// have values that aren't equal to one another this pushes\n\t\t\t\t// us to update further down the tree\n\t\t\t\tlet shouldUpdate = false;\n\t\t\t\tstateHooks.forEach(hookItem => {\n\t\t\t\t\tif (hookItem._nextValue) {\n\t\t\t\t\t\tconst currentValue = hookItem._value[0];\n\t\t\t\t\t\thookItem._value = hookItem._nextValue;\n\t\t\t\t\t\thookItem._nextValue = undefined;\n\t\t\t\t\t\tif (currentValue !== hookItem._value[0]) shouldUpdate = true;\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\treturn shouldUpdate || hookState._component.props !== p\n\t\t\t\t\t? prevScu\n\t\t\t\t\t\t? prevScu.call(this, p, s, c)\n\t\t\t\t\t\t: true\n\t\t\t\t\t: false;\n\t\t\t}\n\n\t\t\tcurrentComponent.shouldComponentUpdate = updateHookState;\n\t\t}\n\t}\n\n\treturn hookState._nextValue || hookState._value;\n}\n\n/**\n * @param {import('./internal').Effect} callback\n * @param {any[]} args\n */\nexport function useEffect(callback, args) {\n\t/** @type {import('./internal').EffectHookState} */\n\tconst state = getHookState(currentIndex++, 3);\n\tif (!options._skipEffects && argsChanged(state._args, args)) {\n\t\tstate._value = callback;\n\t\tstate._pendingArgs = args;\n\n\t\tcurrentComponent.__hooks._pendingEffects.push(state);\n\t}\n}\n\n/**\n * @param {import('./internal').Effect} callback\n * @param {any[]} args\n */\nexport function useLayoutEffect(callback, args) {\n\t/** @type {import('./internal').EffectHookState} */\n\tconst state = getHookState(currentIndex++, 4);\n\tif (!options._skipEffects && argsChanged(state._args, args)) {\n\t\tstate._value = callback;\n\t\tstate._pendingArgs = args;\n\n\t\tcurrentComponent._renderCallbacks.push(state);\n\t}\n}\n\nexport function useRef(initialValue) {\n\tcurrentHook = 5;\n\treturn useMemo(() => ({ current: initialValue }), []);\n}\n\n/**\n * @param {object} ref\n * @param {() => object} createHandle\n * @param {any[]} args\n */\nexport function useImperativeHandle(ref, createHandle, args) {\n\tcurrentHook = 6;\n\tuseLayoutEffect(\n\t\t() => {\n\t\t\tif (typeof ref == 'function') {\n\t\t\t\tref(createHandle());\n\t\t\t\treturn () => ref(null);\n\t\t\t} else if (ref) {\n\t\t\t\tref.current = createHandle();\n\t\t\t\treturn () => (ref.current = null);\n\t\t\t}\n\t\t},\n\t\targs == null ? args : args.concat(ref)\n\t);\n}\n\n/**\n * @param {() => any} factory\n * @param {any[]} args\n */\nexport function useMemo(factory, args) {\n\t/** @type {import('./internal').MemoHookState} */\n\tconst state = getHookState(currentIndex++, 7);\n\tif (argsChanged(state._args, args)) {\n\t\tstate._pendingValue = factory();\n\t\tstate._pendingArgs = args;\n\t\tstate._factory = factory;\n\t\treturn state._pendingValue;\n\t}\n\n\treturn state._value;\n}\n\n/**\n * @param {() => void} callback\n * @param {any[]} args\n */\nexport function useCallback(callback, args) {\n\tcurrentHook = 8;\n\treturn useMemo(() => callback, args);\n}\n\n/**\n * @param {import('./internal').PreactContext} context\n */\nexport function useContext(context) {\n\tconst provider = currentComponent.context[context._id];\n\t// We could skip this call here, but than we'd not call\n\t// `options._hook`. We need to do that in order to make\n\t// the devtools aware of this hook.\n\t/** @type {import('./internal').ContextHookState} */\n\tconst state = getHookState(currentIndex++, 9);\n\t// The devtools needs access to the context object to\n\t// be able to pull of the default value when no provider\n\t// is present in the tree.\n\tstate._context = context;\n\tif (!provider) return context._defaultValue;\n\t// This is probably not safe to convert to \"!\"\n\tif (state._value == null) {\n\t\tstate._value = true;\n\t\tprovider.sub(currentComponent);\n\t}\n\treturn provider.props.value;\n}\n\n/**\n * Display a custom label for a custom hook for the devtools panel\n * @type {<T>(value: T, cb?: (value: T) => string | number) => void}\n */\nexport function useDebugValue(value, formatter) {\n\tif (options.useDebugValue) {\n\t\toptions.useDebugValue(formatter ? formatter(value) : value);\n\t}\n}\n\n/**\n * @param {(error: any, errorInfo: import('preact').ErrorInfo) => void} cb\n */\nexport function useErrorBoundary(cb) {\n\t/** @type {import('./internal').ErrorBoundaryHookState} */\n\tconst state = getHookState(currentIndex++, 10);\n\tconst errState = useState();\n\tstate._value = cb;\n\tif (!currentComponent.componentDidCatch) {\n\t\tcurrentComponent.componentDidCatch = (err, errorInfo) => {\n\t\t\tif (state._value) state._value(err, errorInfo);\n\t\t\terrState[1](err);\n\t\t};\n\t}\n\treturn [\n\t\terrState[0],\n\t\t() => {\n\t\t\terrState[1](undefined);\n\t\t}\n\t];\n}\n\nexport function useId() {\n\tconst state = getHookState(currentIndex++, 11);\n\tif (!state._value) {\n\t\t// Grab either the root node or the nearest async boundary node.\n\t\t/** @type {import('./internal.d').VNode} */\n\t\tlet root = currentComponent._vnode;\n\t\twhile (root !== null && !root._mask && root._parent !== null) {\n\t\t\troot = root._parent;\n\t\t}\n\n\t\tlet mask = root._mask || (root._mask = [0, 0]);\n\t\tstate._value = 'P' + mask[0] + '-' + mask[1]++;\n\t}\n\n\treturn state._value;\n}\n/**\n * After paint effects consumer.\n */\nfunction flushAfterPaintEffects() {\n\tlet component;\n\twhile ((component = afterPaintEffects.shift())) {\n\t\tif (!component._parentDom || !component.__hooks) continue;\n\t\ttry {\n\t\t\tcomponent.__hooks._pendingEffects.forEach(invokeCleanup);\n\t\t\tcomponent.__hooks._pendingEffects.forEach(invokeEffect);\n\t\t\tcomponent.__hooks._pendingEffects = [];\n\t\t} catch (e) {\n\t\t\tcomponent.__hooks._pendingEffects = [];\n\t\t\toptions._catchError(e, component._vnode);\n\t\t}\n\t}\n}\n\nlet HAS_RAF = typeof requestAnimationFrame == 'function';\n\n/**\n * Schedule a callback to be invoked after the browser has a chance to paint a new frame.\n * Do this by combining requestAnimationFrame (rAF) + setTimeout to invoke a callback after\n * the next browser frame.\n *\n * Also, schedule a timeout in parallel to the the rAF to ensure the callback is invoked\n * even if RAF doesn't fire (for example if the browser tab is not visible)\n *\n * @param {() => void} callback\n */\nfunction afterNextFrame(callback) {\n\tconst done = () => {\n\t\tclearTimeout(timeout);\n\t\tif (HAS_RAF) cancelAnimationFrame(raf);\n\t\tsetTimeout(callback);\n\t};\n\tconst timeout = setTimeout(done, RAF_TIMEOUT);\n\n\tlet raf;\n\tif (HAS_RAF) {\n\t\traf = requestAnimationFrame(done);\n\t}\n}\n\n// Note: if someone used options.debounceRendering = requestAnimationFrame,\n// then effects will ALWAYS run on the NEXT frame instead of the current one, incurring a ~16ms delay.\n// Perhaps this is not such a big deal.\n/**\n * Schedule afterPaintEffects flush after the browser paints\n * @param {number} newQueueLength\n */\nfunction afterPaint(newQueueLength) {\n\tif (newQueueLength === 1 || prevRaf !== options.requestAnimationFrame) {\n\t\tprevRaf = options.requestAnimationFrame;\n\t\t(prevRaf || afterNextFrame)(flushAfterPaintEffects);\n\t}\n}\n\n/**\n * @param {import('./internal').EffectHookState} hook\n */\nfunction invokeCleanup(hook) {\n\t// A hook cleanup can introduce a call to render which creates a new root, this will call options.vnode\n\t// and move the currentComponent away.\n\tconst comp = currentComponent;\n\tlet cleanup = hook._cleanup;\n\tif (typeof cleanup == 'function') {\n\t\thook._cleanup = undefined;\n\t\tcleanup();\n\t}\n\n\tcurrentComponent = comp;\n}\n\n/**\n * Invoke a Hook's effect\n * @param {import('./internal').EffectHookState} hook\n */\nfunction invokeEffect(hook) {\n\t// A hook call can introduce a call to render which creates a new root, this will call options.vnode\n\t// and move the currentComponent away.\n\tconst comp = currentComponent;\n\thook._cleanup = hook._value();\n\tcurrentComponent = comp;\n}\n\n/**\n * @param {any[]} oldArgs\n * @param {any[]} newArgs\n */\nfunction argsChanged(oldArgs, newArgs) {\n\treturn (\n\t\t!oldArgs ||\n\t\toldArgs.length !== newArgs.length ||\n\t\tnewArgs.some((arg, index) => arg !== oldArgs[index])\n\t);\n}\n\nfunction invokeOrReturn(arg, f) {\n\treturn typeof f == 'function' ? f(arg) : f;\n}\n"],
  "mappings": "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",
  "names": ["n", "l", "i", "u", "node", "parentNode", "removeChild", "children", "props", "o", "r", "ref", "arguments", "length", "call", "type", "defaultProps", "undefined", "key", "original", "vnode", "__", "__b", "__e", "__d", "__c", "__h", "f", "constructor", "__v", "vnodeId", "options", "createRef", "current", "Component", "this", "context", "getDomSibling", "childIndex", "indexOf", "sibling", "__k", "updateParentDomPointers", "base", "child", "enqueueRender", "c", "push", "__r", "debounceRendering", "prevDebounce", "defer", "process", "component", "parentDom", "rerenderQueue", "sort", "depthSort", "shift", "renderQueueLength", "commitQueue", "refQueue", "oldVNode", "oldDom", "__P", "assign", "__n", "ownerSVGElement", "commitRoot", "diffChildren", "renderResult", "oldParentVNode", "globalContext", "skewedIndex", "isMounting", "EMPTY_ARR", "oldChildren", "remainingOldChildren", "newChildrenLength", "childVNode", "newParentVNode", "e", "s", "t", "createVNode", "isArray", "Fragment", "H", "I", "findMatchingIndex", "EMPTY_OBJ", "matchingIndex", "diff", "isHydrating", "j", "applyRef", "b", "newDom", "skew", "nextSibling", "P", "_", "unmount", "a", "firstChildDom", "oldChildrenLength", "y", "m", "C", "reorderChildren", "tmp", "x", "placeChild", "toChildArray", "out", "p", "some", "insertBefore", "w", "hydrate", "newProps", "setProperty", "isSvg", "oldProps", "value", "IS_NON_DIMENSIONAL", "test", "oldValue", "useCapture", "dom", "style", "name", "replace", "toLowerCase", "slice", "addEventListener", "removeEventListener", "eventProxy", "removeAttribute", "setAttribute", "event", "eventProxyCapture", "excessDomChildren", "provider", "componentContext", "renderHook", "newVNode", "outer", "newType", "contextType", "__E", "prototype", "doRender", "sub", "state", "_sb", "__s", "getDerivedStateFromProps", "oldState", "componentWillMount", "componentDidMount", "componentWillReceiveProps", "shouldComponentUpdate", "forEach", "componentWillUpdate", "componentDidUpdate", "render", "T", "$", "count", "getChildContext", "isNew", "getSnapshotBeforeUpdate", "snapshot", "d", "cb", "diffElementNodes", "nodeType", "localName", "document", "createTextNode", "createElement", "data", "childNodes", "oldHtml", "dangerouslySetInnerHTML", "newHtml", "attributes", "__html", "innerHTML", "S", "diffProps", "A", "checked", "parentVNode", "componentWillUnmount", "skipRemove", "replaceNode", "firstChild", "cloneElement", "normalizedProps", "createContext", "defaultValue", "contextId", "contextValue", "Provider", "_props", "subs", "old", "splice", "k", "Consumer", "error", "getDerivedStateFromError", "ctor", "componentDidCatch", "errorInfo", "setState", "callback", "update", "forceUpdate", "Promise", "then", "bind", "resolve", "setTimeout", "isValidElement", "Array", "getHookState", "index", "type", "options", "__h", "currentComponent", "currentHook", "hooks", "__H", "__", "length", "push", "__V", "EMPTY", "useState", "initialState", "useReducer", "invokeOrReturn", "reducer", "init", "hookState", "currentIndex", "_reducer", "__c", "action", "currentValue", "__N", "nextValue", "setState", "_hasScuFromHooks", "updateHookState", "p", "s", "c", "stateHooks", "filter", "x", "every", "prevScu", "call", "this", "shouldUpdate", "forEach", "hookItem", "props", "shouldComponentUpdate", "prevCWU", "componentWillUpdate", "__e", "tmp", "useEffect", "callback", "args", "state", "__s", "argsChanged", "_pendingArgs", "useLayoutEffect", "useRef", "initialValue", "useMemo", "current", "useImperativeHandle", "ref", "createHandle", "concat", "factory", "useCallback", "useContext", "context", "provider", "sub", "value", "useDebugValue", "formatter", "useErrorBoundary", "cb", "errState", "componentDidCatch", "err", "errorInfo", "undefined", "useId", "root", "__v", "__m", "mask", "flushAfterPaintEffects", "component", "afterPaintEffects", "shift", "__P", "invokeCleanup", "invokeEffect", "e", "afterNextFrame", "raf", "done", "clearTimeout", "timeout", "HAS_RAF", "cancelAnimationFrame", "setTimeout", "requestAnimationFrame", "hook", "comp", "cleanup", "oldArgs", "newArgs", "some", "arg", "f", "previousComponent", "prevRaf", "oldBeforeDiff", "oldBeforeRender", "oldAfterDiff", "oldCommit", "oldBeforeUnmount", "__b", "__r", "diffed", "unmount", "vnode", "commitQueue", "hasErrored"]
}
